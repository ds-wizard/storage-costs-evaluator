name: Storage Costs Evaluator CI

on:
  push:
  pull_request:

jobs:
  btp:
    name: Build-Tag-Push
    runs-on: ubuntu-20.04
    
    env:
      PUBLIC_IMAGE: datastewardshipwizard/storage-costs-evaluator
      PRIVATE_IMAGE: ${{ secrets.PRIVATE_REGISTRY_URL }}/storage-costs-evaluator
      DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
      PRIVATE_REGISTRY_URL: ${{ secrets.PRIVATE_REGISTRY_URL }}
      TAG_DEVELOP: develop
      TAG_LATEST: latest
      STACK_VERSION: '2.5.1'
      NODE_VERSION: '14.17.6'

    steps:
    - uses: actions/checkout@v2
    
    - name: Prepare ~/.local/bin
      run: |
        mkdir -p ~/.local/bin
        export PATH=~/.local/bin:$PATH

# (1) -> Setup cache
    - name: Cache ~/.stack
      id: cache-stack
      uses: actions/cache@v3.0.1
      with:
        path: ~/.stack
        key: stack-home-ubuntu20-${{ hashFiles('**/stack.yaml.lock') }}
        restore-keys: |
          stack-home-ubuntu20
    
    - name: Cache .stack-work
      id: cache-stack-work
      uses: actions/cache@v3.0.1
      with:
        path: .stack-work
        key: stack-work-ubuntu20-${{ hashFiles('**/*.hs') }}
        restore-keys: |
          stack-work-ubuntu20
    
    - name: Cache Stack in ~/.local/bin
      id: cache-stack-local-bin
      uses: actions/cache@v3.0.1
      with:
        path: ~/.local/bin
        key: stack-local-bin-${{ matrix.stack }}-ubuntu20

# (2) -> Prepare and install dependencies     
    - name: Setup stack
      if: steps.cache-stack-local-bin.outputs.cache-hit != 'true'
      run: |
        curl -L https://github.com/commercialhaskell/stack/releases/download/v$STACK_VERSION/stack-$STACK_VERSION-linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack';

    - name: Install GHC and backend dependencies
      run: |
        stack build --no-terminal --install-ghc --test --only-dependencies

    - name: Setup Node.js
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install frontend dependencies
      run: |
        sed -i 's/git+ssh/git+https/g' package-lock.json
        npm ci
        
# (3) -> Build binary
    - name: Build frontend
      run: |
        npm run build
  
    - name: Build backend 
      run: |
        stack build --no-terminal --skip-ghc-check
        cp $(stack path --local-install-root)/bin/storage-costs-evaluator storage-costs-evaluator

# (4) -> Build Docker image
    - name: Docker build
      run: |
        docker pull $PUBLIC_IMAGE:$TAG_LATEST
        docker build --cache-from $PUBLIC_IMAGE:$TAG_LATEST -t ${PRIVATE_IMAGE#/}:$GITHUB_SHA .

# (5) -> Docker image tagging
    - name: Docker login (private)
      if: github.event_name == 'push' && env.PRIVATE_REGISTRY_URL != ''
      run: |
        docker login -u "$PRIVATE_REGISTRY_USERNAME" -p "$PRIVATE_REGISTRY_PASSWORD" "$PRIVATE_REGISTRY_URL"
      env:
        PRIVATE_REGISTRY_URL: ${{ secrets.PRIVATE_REGISTRY_URL }}
        PRIVATE_REGISTRY_USERNAME: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
        PRIVATE_REGISTRY_PASSWORD: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}

    - name: Docker login (public)
      if: github.event_name == 'push' && env.DOCKER_HUB_USERNAME != ''
      run: |
        docker login -u "$DOCKER_HUB_USERNAME" -p "$DOCKER_HUB_PASSWORD"
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Docker push - commit SHA (private)
      if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/') && env.PRIVATE_REGISTRY_URL != ''
      run: |
        docker push $PRIVATE_IMAGE:$GITHUB_SHA

    - name: Docker tag and push - branch (private)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/') && !contains(github.ref, 'release') && env.PRIVATE_REGISTRY_URL != ''
      run: |
        GITHUB_BRANCH=`echo $GITHUB_REF | cut -d/ -f3- | sed 's#/#-#g'`
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PRIVATE_IMAGE:$GITHUB_BRANCH
        docker push $PRIVATE_IMAGE:$GITHUB_BRANCH

    - name: Docker tag and push - develop (public)
      if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
      run: |
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PUBLIC_IMAGE:$TAG_DEVELOP
        docker push $PUBLIC_IMAGE:$TAG_DEVELOP

    - name: Docker tag and push - latest (public)
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $PUBLIC_IMAGE:$TAG_LATEST
        docker push $PUBLIC_IMAGE:$TAG_LATEST

    - name: Docker tag and push - version tag (public)
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        GITHUB_TAG=`echo $GITHUB_REF | cut -d/ -f3` 
        # Release vX.Y.Z
        if [[ $GITHUB_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          IMAGE_TAG_MAJOR="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v(.*)\..*\..*/\1/g"`
          IMAGE_TAG_MINOR="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v(.*)\..*/\1/g"`
          IMAGE_TAG_PATCH="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v//g"`
          echo "Publishing release: $IMAGE_TAG_PATCH";
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_MAJOR && docker push $IMAGE_TAG_MAJOR;
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_MINOR && docker push $IMAGE_TAG_MINOR;
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_PATCH && docker push $IMAGE_TAG_PATCH;
        fi
        # Release candidate vX.Y.Z-rc.R
        if [[ $GITHUB_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+-rc\.[0-9]+$ ]]; then
          IMAGE_TAG_RC="$PUBLIC_IMAGE:"`echo $GITHUB_TAG | sed -E "s/v//g"`
          echo "Publishing release candidate: $IMAGE_TAG_RC";
          docker image tag $PRIVATE_IMAGE:$GITHUB_SHA $IMAGE_TAG_RC && docker push $IMAGE_TAG_RC;
        fi
